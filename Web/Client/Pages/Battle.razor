@page "/battle"
@inject NavigationManager navMan
@inject HttpClient client
@inject IJSRuntime JSRuntime;
@using Web.Shared.Models
@using Web.Client.Components

@{
    if (!confirmOpponent)
    {
        <h3>Your next opponent is: <strong>@(Opponent.Handle)</strong></h3>

        @foreach (var lineup in Opponent.Lineups)
        {
            <div>
                <TeamInfoComponent Team="@lineup"></TeamInfoComponent>
            </div>
            lineupLoaded = true;
        }

        if (lineupLoaded)
        {
            <p>You are about to challenge @(Opponent.Handle). Continue?</p>
            <div class="row">
                <div class="col">
                    <ButtonComponent buttonType="ok" buttonSpan="block" action="Confirm"></ButtonComponent>
                </div>
                <div class="col">
                    <ButtonComponent buttonType="back" buttonSpan="block" action="Back"></ButtonComponent>
                </div>
            </div>
        }
    }
    else
    {
        if (CurrentPoke == null) CurrentPoke = Trainer.Team.Lineup.FirstOrDefault(); 
        if (OpponentPoke == null) OpponentPoke = Opponent.Team.Lineup.FirstOrDefault();
        
        while (true)
        {
            if (selectPokemon)
            {
                <p>Please select a Pokemon to use:</p>

                @foreach (var pokemon in Trainer.Lineups.FirstOrDefault().Lineup.Where(x => x.IsAlive))
                {
                    <button class="btn btn-light m-1" @onclick="(() => PokemonSelected(pokemon.Id))">
                        <PokemonInfoComponent Pokemon="@pokemon"></PokemonInfoComponent>
                    </button>
                }
            }
            else
            {
                <p>Commence battle!!</p>
                <div class="container-fluid" style="max-width:500px">
                    <div class="row">
                        <div class="col">
                            <div class="battle-status opponent">
                                <strong>@(OpponentPoke.Name)</strong>
                                HP: @(OpponentPoke.ActingHP.ToString())/@(OpponentPoke.BaseHP.ToString())
                                <div class="progress">
                                    <div class="progress-bar bg-success" role="progressbar" style="width: calc(@(OpponentPoke.ActingHP.ToString())/@(OpponentPoke.BaseHP.ToString()) * 100%);" aria-valuenow="@(OpponentPoke.ActingHP.ToString())" aria-valuemin="0" aria-valuemax="@(OpponentPoke.BaseHP.ToString())"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col">
                            <img src="@(OpponentPoke.FrontImageUri)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <img src="@(CurrentPoke.BackImageUri)" />
                        </div>
                        <div class="col">
                            <div class="battle-status trainer">
                                <strong>@(CurrentPoke.Name)</strong>
                                HP: @(CurrentPoke.ActingHP.ToString())/@(CurrentPoke.BaseHP.ToString())
                                <div class="progress">
                                    <div class="progress-bar bg-success" role="progressbar" style="width: calc(@(CurrentPoke.ActingHP.ToString())/@(CurrentPoke.BaseHP.ToString()) * 100%);" aria-valuenow="@(CurrentPoke.ActingHP.ToString())" aria-valuemin="0" aria-valuemax="@(CurrentPoke.BaseHP.ToString())"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row dark-menu p-2">
                        @{
                            foreach (var status in battleStatus)
                            {
                                @status<br />
                            }
                        }
                    </div>
                    <div class="row">
                        <div class="col-4">
                            <h3>Menu</h3>
                            <button class="btn btn-primary m-1 mb-0" style="width: 100%" @onclick="SelectPokemon">Switch</button>
                            <button class="btn btn-danger mt-5 m-1" style="width: 100%" @onclick="Back">Forfeit</button>
                        </div>
                        <div class="col-8">
                            <h3>Fight</h3>
                            @{
                                foreach (var move in CurrentPoke.MoveSelections)
                                {
                                    if (!string.IsNullOrEmpty(move.Name))
                                    {
                                        <button type="button" class="btn btn-primary m-1" style="width: 45%;" @onclick="(() => MoveSelected(OpponentPoke, move))">
                                            <p>@move.Name</p>
                                            <div class="d-flex justify-content-between">
                                                <span class="type type-@move.Type"></span> <span>@move.Damage</span>
                                            </div>
                                        </button>
                                    }
                                }
                            }
                        </div>
                    </div>
                </div>
            }break;
        }
    }
}

@code {
        int score = 0;
        bool confirmOpponent { get; set; } = false;
        bool selectPokemon { get; set; } = false;
        bool lineupLoaded { get; set; } = false;

    private TrainerModel Opponent = new TrainerModel();
    private TrainerModel Trainer = new TrainerModel();

    public PokemonService Poke { get; set; }
    public AuthService Auth { get; set; }

    public PokemonModel CurrentPoke { get; set; }
    public PokemonModel OpponentPoke { get; set; }

    List<string> battleStatus { get; set; }

    private void UpdateBattleStatus(string newStatus)
    {
        battleStatus.RemoveAt(0);
        battleStatus.Add(newStatus);
    }

    private void Confirm()
    {
        confirmOpponent = true;
        lineupLoaded = false;
    }

    private void MoveSelected(MoveModel move)
    {
        // determine who goes first
        if (OpponentPoke.Speed > CurrentPoke.Speed)
        {
            // modifiers, typing, random move?, etc
            DoDamage(CurrentPoke, OpponentPoke.MoveSelections[0]); // opponent first
            DoDamage(OpponentPoke, move);
        }
        else
        {
            // modifiers, typing, random move?, etc
            DoDamage(Opponent, move);
            DoDamage(CurrentPoke, OpponentPoke.MoveSelections[0]); // opponent last
        }
    }

    private void DoDamage(PokemonModel afflictedPokemon, MoveModel move)
    {

    }

    private void Back()
    {
        navMan.NavigateTo("home");
    }

    private void SelectPokemon()
    {
        selectPokemon = true;
    }

    private void PokemonSelected(int id)
    {
        foreach (var pokemon in Trainer.Lineups.FirstOrDefault().Lineup.Where(x => x.IsAlive))
        {
            if(pokemon.Id == id)
            {
                if(id == CurrentPoke.Id)
                {
                    UpdateBattleStatus("You have decided to not switch Pokemon.");
                    selectPokemon = false;
                }
                else
                {
                    CurrentPoke = pokemon;
                    UpdateBattleStatus("You have selected " + CurrentPoke.Name);

                    selectPokemon = false;
                }
            }
        }
    }

    private void Win()
    {
        Console.WriteLine("Win");
        // let's say that all 4 elite 4 are defeated, so move onto champion
        navMan.NavigateTo("championbattle");
    }

    private void Lose()
    {
        Console.WriteLine("Lose");
        navMan.NavigateTo("scoreboard");
    }

    private void SelectMove(MoveModel move)
    {
        UpdateBattleStatus(CurrentPoke.Name + " used " + move.Name + "!");
    }

    protected override void OnInitialized()
    {
        Poke = new PokemonService();
        Auth = new AuthService();
    }

    protected override async Task OnInitializedAsync()
    {
        var trainerHandle = await Task.Run(async () => await Auth.GetCookieAsync(JSRuntime, "Username"));

        if (string.IsNullOrEmpty(trainerHandle))
        {
            navMan.NavigateTo("login");
        }
        else
        {
            var championAndElite4 = await Poke.GetElite4AndChampion(client); // grabs champion and elite 4, ordered: champion, 4, 3, 2, 1
            Opponent = championAndElite4.Last();
            Trainer = await Poke.GetTrainer(client, trainerHandle);
            Trainer.Team.Lineup.ToList().ForEach(p => p.ActingHP = p.BaseHP);
            Opponent.Team.Lineup.ToList().ForEach(p => p.ActingHP = p.BaseHP);
            battleStatus = new List<string>() { $"Trainer {Opponent.Handle} challenges you to a battle." };
        }
    }
}
