@page "/trainer"

@inject NavigationManager navMan;
@inject HttpClient client;
@inject IJSRuntime JSRuntime;
@using Web.Shared.Models
@using Web.Client.Components

@if (Loading)
{
    <LoadingComponent />
}
else
{
    <h1> My Trainer </h1>
    @if (UploadAvatar || string.IsNullOrEmpty(MyTrainer.AvatarUrl))
    {
        <br />
        <br />
        <h3> Upload an Avatar!</h3>
        <br />
        <EditForm Model="@MyTrainer">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <form>
                <div class="form-group">
                    <InputText id="avatar_uri" class="form-control" placeholder="uri..." @bind-Value="@saveAvatarUrl" />
                    <button class="btn btn-primary" @onclick="SaveAvatarUrl">Save</button>
                </div>
            </form>
        </EditForm>
        <br />
        <br />
    }
    else
    {
        <br />
        <div style="height: 25vh; width: 25vw; display: flex; align-items: center; justify-content: center;">
            <input type="image" src="@MyTrainer.AvatarUrl" @onclick="() => UploadAvatar = true" style="max-width: 100%; max-height: 100%;" />
        </div>
        <br />
        <br />
    }

    <p>Basic trainer info for @MyTrainer.Handle</p>
    <TrainerInfoComponent Trainer="@MyTrainer" ShowLineups="false"></TrainerInfoComponent>
}

@code {

    private TrainerModel MyTrainer = new TrainerModel();
    public PokemonService Poke { get; set; }
    public AuthService Auth { get; set; }
    private bool Loading { get; set; }
    private bool UploadAvatar { get; set; }
    private string saveAvatarUrl { get; set; }

    protected override void OnInitialized()
    {
        Loading = true;
        Shared.NavMenu.IsLoggedIn = true;
        Poke = new PokemonService();
        Auth = new AuthService();
        JSRuntime.InvokeAsync<string>("PlayMusic", "trainerMusic");
    }

    protected override async Task OnInitializedAsync()
    {
        var trainerHandle = await Task.Run(async () => await Auth.GetCookieAsync(JSRuntime, "Username"));

        if (string.IsNullOrEmpty(trainerHandle))
        {
            navMan.NavigateTo("login");
        }
        else
        {
            MyTrainer = await Poke.GetTrainer(client, trainerHandle);
            MyTrainer.Handle = char.ToUpper(MyTrainer.Handle[0]) + MyTrainer.Handle.Substring(1); // uppercase first letter
        }
        Loading = false;
    }

    public async Task SaveAvatarUrl()
    {
        MyTrainer.AvatarUrl = saveAvatarUrl;
        await Poke.UpdateAvatar(client, MyTrainer); // save the avatar
        UploadAvatar = false;
    }
}
