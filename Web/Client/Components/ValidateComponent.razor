@page "/validate"
@using Web.Shared.Models

@inject NavigationManager navMan
@inject HttpClient client
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <style>
        div, h1, h2, h3, h4, h5, a, button, body, p {
            font-family: 'Press Start 2P', cursive;
        }
    </style>
    <div class="container-fluid" style="max-width: 50%;">
        <h1 class="text-center">Validate Email</h1>
        <p class="text-center">Enter the Code Sent to Your Email</p>

        <!-- Email Validation Code Form -->
        <EditForm Context="formContext" Model="@Model">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <form>
                <div class="form-group">
                    <label for="ValidationCodeInput">Code: </label>
                    <InputText id="ValidationCodeInput" class="form-control" placeholder="code" @bind-Value="@ValidationCodeInput" />
                </div>
                <div class="text-center">
                    <small id="message" style="color: green;">@Message</small><br />
                    <br />
                    <button class="btn btn-primary" @onclick="ValidateCode">Validate</button>
                </div>
            </form>
        </EditForm>
    </div>

    @code {

        [Parameter]
        public ValidationModel Model { get; set; }

        [Parameter]
        public CreateAccountModel CreateAccountModel { get; set; }

        private string Message { get; set; }
        private string ValidationCodeInput { get; set; }
        private AuthService auth { get; set; }

        protected override void OnInitialized()
        {
            Message = $"Code emailed to {Model.Email}";
            auth = new AuthService();
        }

        private void ValidateCode()
        {
            if (Model.RandomCode.ToUpper().Equals(ValidationCodeInput.ToUpper().Trim()))
            {
                Message = $"Email successfully validated with code {ValidationCodeInput}";
                StateHasChanged();

                CreateAccountModel.Email = Model.Email;
                auth.CreateAccount(client, CreateAccountModel);
                navMan.NavigateTo("login");
            }
            else
            {
                Message = $"Code {ValidationCodeInput} is incorrect";
            }
        }
    }
