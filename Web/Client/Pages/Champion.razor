@page "/champion"
@inject NavigationManager navMan
@inject HttpClient client
@inject IJSRuntime JSRuntime;
@using Web.Shared.Models
@using Web.Client.Components

<h1>Champion Info</h1>

<p>This is the current PokeManz league champion to beat with the respective lineup</p>
<br />
@if (Loading)
{
    <LoadingComponent />
}
else
{
    <TrainerInfoComponent Trainer="@ChampionInfo" ShowLineups="true"></TrainerInfoComponent>
}

@code {

    private TrainerModel ChampionInfo = new TrainerModel();
    public PokemonService Poke { get; set; }
    public AuthService Auth { get; set; }
    private bool Loading { get; set; }


    protected override void OnInitialized()
    {
        Loading = true;
        Poke = new PokemonService();
        Auth = new AuthService();
        JSRuntime.InvokeAsync<string>("PlayMusic", "rivalMusic");
    }

    protected override async Task OnInitializedAsync()
    {
        var trainerHandle = await Auth.GetCookieAsync(JSRuntime, "Username");
        if (string.IsNullOrEmpty(trainerHandle))
        {
            navMan.NavigateTo("login");
        }
        else
        {
            var championAndElite4 = await Poke.GetElite4AndChampion(client); // grabs champion and elite 4, ordered: champion, 4, 3, 2, 1
            ChampionInfo = championAndElite4.First();

            //show only the team used for league on champion info page, doesn't save
            ChampionInfo.Lineups.Clear();
            ChampionInfo.Lineups.Add(ChampionInfo.Team);
        }
        Loading = false;
    }
}