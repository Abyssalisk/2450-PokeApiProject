@inject NavigationManager navMan
@inject HttpClient client
@using Web.Shared.Models

<h1>Scoreboard</h1>

<p>display top 10 trainers and scores, etc... in pretty grid/table.</p>

<table id="myTable" class="table sortable">
    <thead>
        <tr>
            <th onclick="w3.sortHTML('#myTable', '.item', 'td:nth-child(1)')" style="cursor:pointer">
                Trainer
                <i class="fa fa-arrow-circle-down" aria-hidden="true"></i>
            </th>
            <th onclick="w3.sortHTML('#myTable', '.item', 'td:nth-child(2)')" style="cursor:pointer">
                Score
                <i class="fa fa-arrow-circle-down" aria-hidden="true"></i>
            </th>
            <th onclick="w3.sortHTML('#myTable', '.item', 'td:nth-child(3)')" style="cursor:pointer">
                Pokemon
                <i class="fa fa-arrow-circle-down" aria-hidden="true"></i>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var trainer in topTenTrainers)
        {
            string team = string.Empty;
            @foreach (PokemonModel p in trainer.Team.Lineup)
            {
                if (string.IsNullOrEmpty(team))
                    team += p.Name;
                else
                {
                    team += ", ";
                    team += p.Name;
                }
            }

            <tr class="item">
                <td>@trainer.Handle</td>
                <td>@trainer.HighScore</td>
                <td>
                    @team
                </td>
            </tr>
        }
    </tbody>
</table>



<br />
@*<button class="btn btn-primary" @onclick="Test">Test</button>*@

@code {

    //int score = 0;

    private List<TrainerModel> topTenTrainers = new List<TrainerModel>();


    private async Task Test()
    {
        var endpoint = $"api/Login/validate/serosenvall@gmail.com";
        var validator = await client.GetFromJsonAsync<ValidationModel>(endpoint);
        var Result = validator.RandomCode;
    }

    protected override async Task OnInitializedAsync()
    {
        topTenTrainers.Add(new TrainerModel()
        {
            Handle = "Spencer",
            HighScore = 10,
            Team = new LineupModel()
            {
                Lineup = new List<PokemonModel>()
            {
                    new PokemonModel() { Name = "Charizard" },
                    new PokemonModel() { Name = "Gengar" },
                    new PokemonModel() { Name = "Houndoom" }
                }
            }
        });

        topTenTrainers.Add(new TrainerModel()
        {
            Handle = "Gavin",
            HighScore = 15324500,
            Team = new LineupModel()
            {
                Lineup = new List<PokemonModel>()
            {
                    new PokemonModel() { Name = "Gyrados" },
                    new PokemonModel() { Name = "Articuno" },
                    new PokemonModel() { Name = "Charizard" }
                }
            }
        });

        var testpokemon1 = new PokemonModel();
        var testpokemon2 = new PokemonModel();
        var testpokemon3 = new PokemonModel();


        // Test Web.Server.Controllers
        try
        {
            var url = client.BaseAddress + "api/Pokemon/1";
            Console.WriteLine(url);
            testpokemon1 = await client.GetFromJsonAsync<PokemonModel>("api/Pokemon/name/blastoise");
            testpokemon2 = await client.GetFromJsonAsync<PokemonModel>("api/Pokemon/name/charizard");
            testpokemon3 = await client.GetFromJsonAsync<PokemonModel>("api/Pokemon/name/bulbasaur");

            topTenTrainers.Add(new TrainerModel()
            {
                Handle = "hello from the controller",
                HighScore = 314159,
                Team = new LineupModel()
                {
                    Lineup = new List<PokemonModel>()
            {
                    new PokemonModel() { Name = "Charizard" },
                    new PokemonModel() { Name = "Charizard" },
                    new PokemonModel() { Name = "Charizard" }
                }
                }
            });
        }
        catch // Non success
        {
            Console.WriteLine("An error occurred.");
        }
    }

}