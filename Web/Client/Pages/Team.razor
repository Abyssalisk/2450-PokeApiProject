@page "/team"
@inject NavigationManager navMan
@inject HttpClient client
@inject IJSRuntime JSRuntime;

@using Web.Shared.Models
@using Web.Client.Components
    <head>
        <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    </head>

@if (!Loading)
{
    <button class="btn btn-primary float-right" style="font-family:'Press Start 2P'" @onclick="CreateNewTeam">Create New Team</button>

    <h2 style="font-family:'Press Start 2P'">@Title</h2>
    <br />
    if (Trainer?.Lineups?.Count > 0)
    {
        teamCounter = 0;
        <div class="container-fluid text-center">
            <div class="row-fluid">
                <label for="activeLineup"><b>Active Lineup</b></label>
                <select id="activeLineup" @onchange=@LineupChanged>
                    @foreach (var lineup in Trainer.Lineups)
                    {
                        var viewVal = teamCounter + 1;
                        <option value=@teamCounter>Lineup @viewVal</option>
                        teamCounter++;
                    }
                </select>

                @if (!string.IsNullOrEmpty(TeamSaved))
                {
                    <div>
                        <div class="badge badge-success">
                            @TeamSaved
                        </div>
                    </div>
                    <br />
                }
            </div>
        </div>
        <br />

        teamCounter = 0;
        @foreach (var lineup in Trainer.Lineups)
        {
            teamCounter++;
            <br />
            <div>
                <h3  style="font-family:'Press Start 2P'">Lineup @teamCounter</h3>
                <TeamInfoComponent Team="@lineup"></TeamInfoComponent>
            </div>
        }
    }
    else
    {
        <h3 class="text-center"  style="font-family:'Press Start 2P'">You have no teams, click Create New Team to begin</h3>
    }
}
else
{
    <LoadingComponent />
}

@code {
    private TrainerModel Trainer = new TrainerModel();
    public PokemonService Poke { get; set; }
    public AuthService Auth { get; set; }
    private string Title { get; set; }
    private int teamCounter = 0;
    private bool Loading { get; set; }
    private string TeamSaved { get; set; }

    private void CreateNewTeam()
    {
        navMan.NavigateTo("newTeam");
    }

    protected void LineupChanged(ChangeEventArgs e)
    {
        var val = int.Parse(e.Value.ToString());
        Trainer.Team = Trainer.Lineups[val];

        // save the team
        Task.Run(() => Poke.UpdateLineup(client, Trainer));
        TeamSaved = string.Empty; // clear string if team is changing

        // display team saved message
        Trainer.Team.Lineup.ForEach(p =>
        {
            if (!string.IsNullOrEmpty(TeamSaved))
                TeamSaved += ", " + p.Name;
            else
            {
                val++;
                TeamSaved += $"Saved Team (Lineup {val}): " + p.Name;
            }

        });
    }

    protected override void OnInitialized()
    {
        Loading = true;
        Title = "My Teams";
        Poke = new PokemonService();
        Auth = new AuthService();
    }

    protected override async Task OnInitializedAsync()
    {
        var trainerHandle = await Task.Run(async () => await Auth.GetCookieAsync(JSRuntime, "Username"));

        if (string.IsNullOrEmpty(trainerHandle))
        {
            navMan.NavigateTo("login");
        }
        else
        {
            Trainer = await Poke.GetTrainer(client, trainerHandle);
            trainerHandle = trainerHandle.Replace("\"", string.Empty);
            trainerHandle = char.ToUpper(trainerHandle[0]) + trainerHandle.Substring(1); // uppercase first letter //Sam G: Don't you think we should respect the username's original casing?
            Title = trainerHandle + "\'s Teams";
            Loading = false;
        }
    }
}
