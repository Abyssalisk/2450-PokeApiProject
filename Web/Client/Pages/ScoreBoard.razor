@page "/scoreboard"
@inject NavigationManager navMan
@inject HttpClient client
@using Web.Shared.Models

<h1>Scoreboard</h1>

<p>display top 10 trainers and scores, etc... in pretty grid/table.</p>

<table class="table">
    <thead>
        <tr>
            <th>Trainer</th>
            <th>Score</th>
            <th>Pokemon</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var trainer in topTenTrainers)
        {
            string team = string.Empty;
            @foreach (Pokemon p in trainer.Team)
            {
                if (string.IsNullOrEmpty(team))
                    team += p.Name;
                else
                {
                    team += ", ";
                    team += p.Name;
                }
            }

            <tr>
                <td>@trainer.Handle</td>
                <td>@trainer.Score</td>
                <td>
                    @team
                </td>
            </tr>
        }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="PlayAgain">Play Again?</button>
<button class="btn btn-primary" @onclick="Exit">Exit</button>
<br />
<button class="btn btn-primary" @onclick="Test">Test</button>

@code {

    //int score = 0;

    private List<Trainer> topTenTrainers = new List<Trainer>();


    private async Task Test()
    {
        var endpoint = $"api/Login/validate/serosenvall@gmail.com";
        var validator = await client.GetFromJsonAsync<Validator>(endpoint);
        var Result = validator.RandomCode;
    }

    protected override async Task OnInitializedAsync()
    {
        topTenTrainers.Add(new Trainer()
        {
            Handle = "Spencer",
            Score = 100,
            Team = new List<Pokemon>() { new Pokemon() { Name = "Charizard" },
            new Pokemon() { Name = "Gengar" },
            new Pokemon() { Name = "Houndoom" } }
        });

        topTenTrainers.Add(new Trainer()
        {
            Handle = "Gavin",
            Score = 250,
            Team = new List<Pokemon>() { new Pokemon() { Name = "Gyrados" },
            new Pokemon() { Name = "Articuno" },
            new Pokemon() { Name = "Feraligatr" } }
        });
        topTenTrainers.Add(new Trainer()
        {
            Handle = "Trainer 3",
            Score = 15,
            Team = new List<Pokemon>() { new Pokemon() { Name = "Metapod" },
            new Pokemon() { Name = "Kakuna" },
            new Pokemon() { Name = "Magikarp" } }
        });

        var testpokemon1 = new Pokemon();
        var testpokemon2 = new Pokemon();
        var testpokemon3 = new Pokemon();


        // Test Web.Server.Controllers
        try
        {
            var url = client.BaseAddress + "api/Pokemon/1";
            Console.WriteLine(url);
            testpokemon1 = await client.GetFromJsonAsync<Pokemon>("api/Pokemon/name/blastoise");
            testpokemon2 = await client.GetFromJsonAsync<Pokemon>("api/Pokemon/name/charizard");
            testpokemon3 = await client.GetFromJsonAsync<Pokemon>("api/Pokemon/name/bulbasaur");

            topTenTrainers.Add(new Trainer()
            {
                Handle = "Trainer Controller",
                Score = 1576,
                Team = new List<Pokemon>() { testpokemon1, testpokemon2, testpokemon3 }
            });
        }
        catch // Non success
        {
            Console.WriteLine("An error occurred.");
        }
    }

    private void PlayAgain()
    {
        Console.WriteLine("Resetting");
        navMan.NavigateTo("team");
    }

    private void Exit()
    {
        Console.WriteLine("Exiting App");
        navMan.NavigateTo("/"); // login
    }
}
