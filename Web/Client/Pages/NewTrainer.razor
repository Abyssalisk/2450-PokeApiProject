@page "/newTrainer"
@using Web.Shared.Models
@using Web.Client.Pages

@inject NavigationManager navMan
@inject HttpClient client
@*@inject AuthService auth*@


<div class="container-fluid" style="max-width: 50%;">
    @{
        if (auth.CodeSent)
        {
            <Validate Model=@Validation ></Validate>
        }
        else
        {
            <h1 class="text-center">Create Account</h1>
            <p class="text-center">Fill Out the Form and then Click Create Account</p>
            <!-- CreateAccount Form -->
            <EditForm Model=@Model>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <form>
                    <div class="form-group">
                        <label for="Username">Username: </label>
                        <InputText id="Username" class="form-control" placeholder="username" @bind-Value=@Model.Username />
                    </div>
                    <div class="form-group">
                        <label for="Password">Password: </label>
                        <InputText type="password" id="Password" class="form-control" placeholder="password" @bind-Value=@Model.Password />
                    </div>
                    <div class="form-group">
                        <label for="Email">Email: </label>
                        <InputText id="Email" class="form-control" placeholder="email" @bind-Value=@Model.Email />
                    </div>
                    <div class="text-center">
                        <small id="message" style="color: red;">@Message</small><br />
                        <br />
                        <button class="btn btn-primary" @onclick="DoCreateAccount">Create Account</button>
                        <button class="btn btn-secondary" @onclick="GoBack">Back</button>
                    </div>
                </form>
            </EditForm>
        }
    }
</div>


@code {
    private CreateAccountModel Model = new CreateAccountModel();
    private string Message { get; set; }
    private string ValidationCodeInput { get; set; }

    private ValidationModel Validation { get; set; }
    private string RandomCode { get; set; }

    private AuthService auth { get; set; }

    protected override void OnInitialized()
    {
        auth = new AuthService();
        Message = "A code will be sent to your email for verification";
        Validation = new ValidationModel() { Email = "serosenvall@gmail.com", RandomCode = "XYZXYZ" }; // testing
    }

    private void DoCreateAccount()
    {
        if (!string.IsNullOrEmpty(Model.Username) && !string.IsNullOrEmpty(Model.Password) && !string.IsNullOrEmpty(Model.Email))
        {
            Validation = new ValidationModel()
            {
                RandomCode = auth.GenRandomString(),
                Email = Model.Email
            };

            auth.SendEmail(client, Validation.Email, Validation.RandomCode);
            auth.CodeSent = true;
        }
        //navMan.NavigateTo("validate");
        StateHasChanged();
    }

    private void GoBack()
    {
        navMan.NavigateTo("login");
    }
}

