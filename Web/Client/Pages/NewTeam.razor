@page "/newTeam"

@inject NavigationManager navMan;
@inject HttpClient client;
@inject IJSRuntime JSRuntime;
@using Web.Shared.Models
@using Web.Client.Components

<div class="container-fluid" style="max-width: 100%; float: left;">
    <h1 class="text-center">New Team</h1>
    @if (PokemonNames?.Count > 0)
    {
        <NewLineupComponent PokemonNames="@PokemonNames" Trainer="@Trainer" />
    }

</div>

@code {
    public TrainerModel Trainer { get; set; }
    private AuthService Auth { get; set; }
    private PokemonService Poke { get; set; }
    public string trainerHandle = string.Empty;

    public List<CheckBox> PokemonNames { get; set; }

    // set trainer.team to selected team

    protected override void OnInitialized()
    {
        //Trainer = new TrainerModel();
        Auth = new AuthService();
        Poke = new PokemonService();
        this.PokemonNames = new List<CheckBox>();
    }

    protected override async Task OnInitializedAsync()
    {
        var names = await Poke.GetAllPokemonNames(client);
        Dictionary<string, Task<PokemonModel>> gets = new Dictionary<string, Task<PokemonModel>>();
        names.ForEach(n =>
        {
            if (!gets.ContainsKey(n))
            {
                gets.Add(n, Poke.GetPokemonByName(client, n));
            }
        });
        Task.WaitAll(gets.Values.ToArray());
        names.ForEach(n =>
        {
            PokemonNames.Add(new CheckBox()
            {
                Text = n,
                Checked = false,
                ImgURI = gets[n].Result.FrontImageUri,
                Types = ((gets[n]).Result).Types.Select<PokemonType, string>(x => x.Name).ToArray()
            });
        });
        trainerHandle = await Auth.GetCookieAsync(JSRuntime, "Username");

        if (string.IsNullOrEmpty(trainerHandle))
        {
            navMan.NavigateTo("login");
        }
        else
        {
            Trainer = await Poke.GetTrainer(client, trainerHandle);
            if (Trainer.Lineups == null)
                Trainer.Lineups = new List<LineupModel>(); // used actually, not sure why it doesn't set where expected, look into later
        }
    }

    public class CheckBox
    {
        public bool Checked { get; set; }
        public string Text { get; set; }
        public string ImgURI { get; set; }
        public string[] Types { get; set; }
    }
}

