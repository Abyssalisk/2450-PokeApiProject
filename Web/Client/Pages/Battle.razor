@page "/battle"
@inject NavigationManager navMan
@inject HttpClient client
@inject IJSRuntime JSRuntime;
@using Web.Shared.Models
@using Web.Client.Components

@{ if (Loading)
    {
        <LoadingComponent />
    }
    else
    {
        if (!confirmOpponent)
        {
            <h3>Your next opponent is: <strong>@(Opponent.Handle)</strong></h3>
            <div>
                <TeamInfoComponent Team="@Opponent.Team"></TeamInfoComponent>
            </div>

            lineupLoaded = true;
            if (lineupLoaded)
            {
                <p>You are about to challenge @(Opponent.Handle). Continue?</p>
                <div class="row">
                    <div class="col">
                        <ButtonComponent buttonType="ok" buttonSpan="block" action="Confirm"></ButtonComponent>
                    </div>
                    <div class="col">
                        <ButtonComponent buttonType="back" buttonSpan="block" action="Back"></ButtonComponent>
                    </div>
                </div>
            }
        }
        else
        {
            while (true)
            {
                if (selectPokemon)
                {
                    <p>Please select a Pokemon to use:</p>

                    @foreach (var pokemon in Trainer.Team.Lineup.Where(x => x.IsAlive))
                    {
                        <button class="btn btn-light m-1" @onclick="(() => PokemonSelected(pokemon.Id))">
                            <PokemonInfoComponent Pokemon="@pokemon"></PokemonInfoComponent>
                        </button>
                    }
                }
                else
                {
                    <p>Commence battle!!</p>
                    <div class="container-fluid" style="max-width:500px">
                        <div class="row">
                            <div class="col">
                                <div class="battle-status opponent">
                                    <strong>@(OpponentPoke.Name)</strong>
                                    HP: @(OpponentPoke.ActingHP.ToString())/@(OpponentPoke.BaseHP.ToString())
                                    <div class="progress">
                                        <div class="progress-bar bg-success" role="progressbar" style="width: calc(@(OpponentPoke.ActingHP.ToString())/@(OpponentPoke.BaseHP.ToString()) * 100%);" aria-valuenow="@(OpponentPoke.ActingHP.ToString())" aria-valuemin="0" aria-valuemax="@(OpponentPoke.BaseHP.ToString())"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="col">
                                <img src="@(OpponentPoke.FrontImageUri)" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <img src="@(CurrentPoke.BackImageUri)" />
                            </div>
                            <div class="col">
                                <div class="battle-status trainer">
                                    <strong>@(CurrentPoke.Name)</strong>
                                    HP: @(CurrentPoke.ActingHP.ToString())/@(CurrentPoke.BaseHP.ToString())
                                    <div class="progress">
                                        <div class="progress-bar bg-success" role="progressbar" style="width: calc(@(CurrentPoke.ActingHP.ToString())/@(CurrentPoke.BaseHP.ToString()) * 100%);" aria-valuenow="@(CurrentPoke.ActingHP.ToString())" aria-valuemin="0" aria-valuemax="@(CurrentPoke.BaseHP.ToString())"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row dark-menu p-2">
                            @{
                                foreach (var status in battleStatus)
                                {
                                    @status<br />
                                }
                            }
                        </div>
                        <div class="row">
                            <div class="col-4">
                                <h3>Menu</h3>
                                <button class="btn btn-primary m-1 mb-0" style="width: 100%" @onclick="SelectPokemon">Switch</button>
                                <button class="btn btn-danger mt-5 m-1" style="width: 100%" @onclick="Back">Forfeit</button>
                            </div>
                            <div class="col-8">
                                <h3>Fight</h3>
                                @{
                                    foreach (var move in CurrentPoke.MoveSelections)
                                    {
                                        if (!string.IsNullOrEmpty(move.Name))
                                        {
                                            <button type="button" class="btn btn-primary m-1" style="background-color: @TypeColor(move.Type); width: 45%; height: 38%" @onclick="(() => MoveSelection(move))">
                                                <p>@move.Name</p>
                                                <div class="d-flex justify-content-between">
                                                    <span class="type type-@move.Type"></span> <span>@move.Damage</span>
                                                </div>
                                            </button>
                                        }
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
                break;
            }
        }
    }
}

@code {
    bool confirmOpponent { get; set; } = false;
    bool selectPokemon { get; set; } = false;
    bool lineupLoaded { get; set; } = false;
    bool Loading { get; set; } = true;

    private int BattlePosition { get; set; } = 4;
    private Random Rand { get; set; }

    private TrainerModel Opponent = new TrainerModel();
    private TrainerModel Trainer = new TrainerModel();

    private List<TrainerModel> Elite4AndChampion { get; set; }

    public PokemonService Poke { get; set; }
    public AuthService Auth { get; set; }

    public PokemonModel CurrentPoke { get; set; }
    public PokemonModel OpponentPoke { get; set; }

    List<string> battleStatus { get; set; }

    private void UpdateBattleStatus(string newStatus)
    {
        battleStatus.RemoveAt(0);
        battleStatus.Add(newStatus);
    }

    private void Confirm()
    {
        confirmOpponent = true;
        lineupLoaded = false;
    }

    private void MoveSelection(MoveModel move)
    {
        // determine who goes first
        if (OpponentPoke.Speed > CurrentPoke.Speed)
        {
            // modifiers, typing, random move?, etc
            DoDamage(OpponentPoke, CurrentPoke, OpponentPoke.MoveSelections.Where(m => m.Damage > 0).ToList()[Rand.Next(0, 3)]); // opponent first

            var dead = CurrentPoke.ActingHP <= 0;
            if (!dead)
            {
                DoDamage(CurrentPoke, OpponentPoke, move);
            }
            else
            {
                selectPokemon = true;
            }

            if (OpponentPoke.ActingHP <= 0) OpponentPokeDead();
        }
        else
        {
            // modifiers, typing, random move?, etc
            DoDamage(CurrentPoke, OpponentPoke, move);

            var dead = OpponentPoke.ActingHP <= 0;
            if (!dead)
            {
                DoDamage(OpponentPoke, CurrentPoke, OpponentPoke.MoveSelections.Where(m => m.Damage > 0).ToList()[Rand.Next(0, 3)]); // opponent last

                if (CurrentPoke.ActingHP <= 0)
                    selectPokemon = true;
            }
            else
            {
                OpponentPokeDead();
            }
        }

        // no more available pokemon, lose
        if (!Trainer.Team.Lineup.Any(p => p.ActingHP > 0))
        {
            Lose();
        }
    }

    private void OpponentPokeDead()
    {
        if (!Opponent.Team.Lineup.Any(p => p.ActingHP > 0))
        {
            Trainer.HighScore = Opponent.HighScore + 1000;
            Task.Run(() => Poke.UpdateScore(client, Trainer));
            UpdateMessage($"{OpponentPoke} fainted!");
            BattlePosition--;
            SetupOpponent();
            confirmOpponent = false;
            UpdateMessage($"Opponent sent out {OpponentPoke.Name}!");
        }
        else
        {
            OpponentPoke = Opponent.Team.Lineup.First(p => p.ActingHP > 0);
        }
    }

    private void UpdateMessage(string m)
    {
        battleStatus.Add(m);

        if (battleStatus.Count > 2)
            battleStatus.Remove(battleStatus.First());
    }

    private void DoDamage(PokemonModel attackingPoke, PokemonModel afflictedPoke, MoveModel move)
    {
        int damage;

        if (move.Type == "physical")
        {
            damage = (move.Damage * attackingPoke.Attack / afflictedPoke.Defense);
            afflictedPoke.ActingHP = afflictedPoke.ActingHP - damage;
        } else
        {
            damage = (move.Damage * attackingPoke.SpecialAttack / afflictedPoke.SpecialDefense);
            afflictedPoke.ActingHP = afflictedPoke.ActingHP - damage;
        }

        if (afflictedPoke == OpponentPoke)
        {
            UpdateMessage($"{CurrentPoke.Name} used {move.Name} for {damage} damage!");
        }
        else
        {
            UpdateMessage($"{OpponentPoke.Name} used {move.Name} for {damage} damage!");
        }
    }

    private void Back()
    {
        Trainer.HighScore = Opponent.HighScore - 10;
        Task.Run(() => Poke.UpdateScore(client, Trainer));
        navMan.NavigateTo("home");
    }

    private void SelectPokemon()
    {
        selectPokemon = true;
    }

    private void PokemonSelected(int id)
    {
        foreach (var pokemon in Trainer.Team.Lineup.Where(x => x.IsAlive))
        {
            if (pokemon.Id == id)
            {
                if (id == CurrentPoke.Id)
                {
                    UpdateBattleStatus("You have decided to not switch Pokemon.");
                    selectPokemon = false;
                }
                else
                {
                    CurrentPoke = pokemon;

                    UpdateBattleStatus("You have selected " + CurrentPoke.Name);
                    selectPokemon = false;
                }
            }
        }
    }

    private void Win()
    {
        Console.WriteLine("Win");
        // update trainer Highscore
        navMan.NavigateTo("championbattle");
    }

    private void Lose()
    {
        Trainer.HighScore = Opponent.HighScore - 10;
        Task.Run(() => Poke.UpdateScore(client, Trainer));
        // update trainer highscores
        navMan.NavigateTo("scoreboard");
    }

    private void SelectMove(MoveModel move)
    {
        UpdateBattleStatus(CurrentPoke.Name + " used " + move.Name + "!");
    }

    private void SetupOpponent()
    {
        if (BattlePosition == -1) // champion defeated
        {
            Win();
        }
        else
        {
            Opponent = Elite4AndChampion[BattlePosition];
            Opponent.Team.Lineup.ToList().ForEach(p => p.ActingHP = p.BaseHP);
            Trainer.Team.Lineup.ToList().ForEach(p => p.ActingHP = p.BaseHP);
            OpponentPoke = Opponent.Team.Lineup.FirstOrDefault();
            battleStatus = new List<string>() { $"Trainer {Opponent.Handle} challenges you to a battle." };
        }
    }

    private string TypeColor(string type)
    {
        switch (type.ToLower())
        {
            // 15 types for gen 1 pokemon
            case "fire": return "rgb(240, 127, 47, 0.75)";
            case "water": return "rgb(104, 144, 240, 0.75)";
            case "grass": return "rgb(120, 200, 79, 0.75)";
            case "rock": return "rgb(139, 133, 105, 0.75)";

            case "flying": return "rgb(168, 144, 240, 0.75)";
            case "poison": return "rgb(160, 64, 161, 0.75)";
            case "ice": return "rgb(152, 216, 216, 0.75)";
            case "dragon": return "rgb(112, 56, 249, 0.75)";

            case "normal": return "rgb(169, 168, 120, 0.75)";
            case "pyschic": return "rgb(246, 88, 136, 0.75)";
            case "ground": return "rgb(184, 146, 38, 0.75)";
            case "ghost": return "rgb(112, 87, 152, 0.75)";

            case "fighting": return "rgb(192, 48, 40, 0.75)";
            case "bug": return "rgb(168, 184, 33, 0.75)";
            case "electric": return "rgb(197, 170, 7, 0.75)";

            default: return "rgb(233, 109, 180, 0.75)";
        }
    }

    protected override void OnInitialized()
    {
        Poke = new PokemonService();
        Auth = new AuthService();
        Rand = new Random();
    }

    protected override async Task OnInitializedAsync()
    {
        var trainerHandle = await Task.Run(async () => await Auth.GetCookieAsync(JSRuntime, "Username"));

        if (string.IsNullOrEmpty(trainerHandle))
        {
            navMan.NavigateTo("login");
        }
        else
        {
            Trainer = await Poke.GetTrainer(client, trainerHandle);
            Trainer.Team.Lineup.ToList().ForEach(p => p.ActingHP = p.BaseHP);
            CurrentPoke = Trainer.Team.Lineup.FirstOrDefault();

            var championAndElite4 = await Poke.GetElite4AndChampion(client); // grabs champion and elite 4, ordered: champion, 4, 3, 2, 1
            Elite4AndChampion = championAndElite4;

            SetupOpponent();
        }

        Loading = false;
    }
}
